!PNGGECFG

# default settings file

# In case of an invalid value specified for a CVAR in this file, a default value will be forced instead and
# error will be logged (check the log file).
# Only the invalid CVARs will be defaulted by the game, valid CVARs will be still accepted.

# If opened in Notepad++, I recommend setting INI or Makefile syntax highlighting in Language menu.

#############
#           #
#  NETWORK  #
#           #
#############

# True: game instance will start up as listen-server, false: start up as a client.
net_server = false
# Clients try to connect to the server at address specified in cl_server_ip.


# IPv4 address of server where client tries to connect to.
cl_server_ip = 127.0.0.1
# Client-only property.
# Should be defined in dotted decimal notation.
# For localhost, use: 127.0.0.1.
# IPv6 addresses will be officially supported later.


############
#          #
#  SERVER  #
#          #
############

# Which map should be loaded by server before looping mapcycle?
sv_map = map_warhouse.txt
# If left empty, then server immediately starts to loop the mapcycle (gamedata/maps/mapcycle.txt).
# If a map is specified here, it will precede other maps listed in the mapcycle.
# Clients load maps as instructed by the server instance.

# Teams are forced to respawn at team-specific spawn points.
sv_map_team_spawn_groups = true
# Valid only in team-based game modes.
# Maps need to define team-specific spawn groups to make this feature work.
# Absence of spawn group definition in the map is not an error but team mates will spawn as if this option was disabled.

# Collision detection mode between objects.
sv_map_collision_mode = 1
# 0: legacy, naive, slow (before v0.5.1).
# 1: new, using BVH, fast (from v0.5.1).

# Wireframed rendering of BVH nodes, with red highlighting for the player's "one tightest fitting node".
sv_map_collision_bvh_debug_render = false

# Maximum BVH tree depth level.
sv_map_collision_bvh_max_depth = 4
# Shall be greater than 0.
# Based on tests of values 3, 4 and 5, the best value is 4 because it is 10-30% faster than 3, and value 5 is just 1-2% faster or worse than value 4.
# Tests were performed on these maps: warhouse, mutans, warena.

sv_gamemode = 0

# Dev note for sv_gamemode:
# 0 - DeathMatch
# 1 - Team DeathMatch
# 2 - Team RoundGame

# If enabled, teammates can do damage to each other.
sv_tdm_friendlyfire = true
# Valid only in team-based game modes.
# Killing a teammate with friendly fire decrements the killer's frags by 1.

# Maximum amount of time a game session can last, in seconds.
sv_gm_timelimit_secs = 600
# Game ends when the time limit is reached.
# 0 means no time limit.
# If both frag limit and time limit are set, game ends when any limit is reached earlier.

# Maximum number of frags a player or team can get in a game session.
sv_dm_fraglimit = 10
# Game ends when the frag limit is reached by a player or a team.
# In Team DeathMatch, the sum of players' frags per each team is checked against the frag limit.
# 0 means no frag limit.
# If both frag limit and time limit are set, game ends when any limit is reached earlier.

# Tells how much player HP is affected after falling on the ground from high.
sv_fall_damage_multiplier = 3
# As this is a multiplier, 0 means no fall damage at all.

# If set, player movement also affects weapon aim/accuracy.
sv_moving_affects_aim = true
# It is similar to CS 1.6: when players move, especially while running or jumping, their
# aim accuracy is significantly reduced. This is to encourage strategic movement and positioning,
# as well as to reward players who control their movement and aim better.
#
# If unset, it is similar to Quake 3: players can move at high speeds, jump, and perform complex
# maneuvers without suffering from accuracy penalties. The game emphasizes the player's ability to
# maintain precise aim while moving quickly and executing complex maneuvers. This requires a
# different skill set compared to the tactical, movement-penalized aiming in CS 1.6.

# Should server allow players to modify their horizontal movement mid-air?
sv_allow_strafe_mid_air = true
# A lot of FPS games such as CS 1.6 and Quake 3 allow it.
# Some other games such as the original Prince of Persia don't allow.

# Should server allow player to FULLY modify their horizontal movement mid-air?
sv_allow_strafe_mid_air_full = false
# Effective only if sv_allow_strafe_mid_air is also true.
# An example of full mid-air strafe control is Super Mario where the player can also negate the initial strafe direction.

# Crouch automatically for easier triggering mid-air salto/somersault?
sv_somersault_mid_air_auto_crouch = true
# Somersaulting can be done only while crouching.
# On-the-ground somersaulting always requires the player to manually crouch first.
# For mid-air somersaulting, crouch might be automatic or manual.
# If set, mid-air somersault can be triggered by an easy double jump combo as crouching is automatic for the duration of the somersault.
# Otherwise, triggering mid-air somersault requires the following input combo: jump-crouch-jump.
# Mid-air somersaulting can be triggered only during jump-up, and not when falling or standing on the ground.

# When triggering mid-air salto/somersault, the current jump forces are multiplied by this value.
sv_somersault_mid_air_jump_force_multiplier = 1.5
# Minimum value is 1.0 which is leaving the current jump forces unchanged.

# Time in seconds to wait before a dead player can respawn.
sv_dm_respawn_delay = 3
# 0 means instant respawn.
# In effect only in some game modes, e.g. deathmatch.

# Spawn protection: time in seconds a player is invulnerable after respawning.
sv_dm_respawn_invulnerability_delay = 1
# 0 means no invulnerability after respawn.
# In effect only in some game modes, e.g. deathmatch.

# Debug: increase this for server to simulate slower rendering. Millisecs. Min value is 1.
#sv_extra_render_delay = 40

# Time in seconds to wait before starting listening to incoming client connections again.
sv_reconnect_delay = 2
# Example situation is map changing.
# Increasing it is good for testing situation when server is coming back slower than clients.


##############
#            #
#  GAMEPLAY  #
#            #
##############

# Your name as to be shown in the frag table.
cl_name = Player
# Used by server and client instances.
# The max length for name is defined as 44 ASCII characters.
# Server instance makes sure there is no collision between player names.
# If left as empty, the game will generate a unique name.

# Developer note for cl_name: max length is coming from: (MsgUserNameChange::nUserNameBufferLength - 1).

# Show main menu at startup and when exiting a game session.
gui_mainmenu = true
# The primary function of the main menu is to allow easy and straightforward modification of this cfg file.
# If you disable it, the only way to modify the configuration is to manually edit this file or use command-line arguments.
# Auto-tests currently don't expect main menu thus they disable it from command-line.

# Show targeted player's name below the crosshair.
gui_xhair_identifies_players = true

# Show players' positions on the map in a small rectangular area in the top left corner.
gui_minimap_show = true

# Make minimap moderately transparent so it does not completely occlude everything behind it.
gui_minimap_transparent = true

# What to do if the picked up weapon is NEW (regardless of if the current weapon is empty or not)?
cl_wpn_auto_switch_when_picked_up_new_wpn = auto-switch
# NEW weapon means: first time pickup by the player in the current game session.
# Note: last option works only if the generic "Pickup-Induced Auto-Switch to ANY (...)" option is also enabled.

# Note for the above: possible values are:
# - "auto-switch": always switch to picked up weapon even if it is weaker or the current is not empty
# - "auto-switch-if-better": switch to picked up weapon only if it is better than the current
# - "auto-switch-if-empty": switch to picked up weapon only if the current is empty

# Should auto-switch to the picked up weapon when the current weapon is empty (regardless of if the picked up one is new)?
cl_wpn_auto_switch_when_picked_up_any_ammo_empty_mag = true
# 
# If the current empty weapon is already being reloaded when the other NON-NEW weapon is picked up, then 
# auto-switch will NOT happen, as it would be pure time wasting for the player.
# However, if a NEW weapon is picked up during reloading, then the auto-switch will happen as configured for the
# "Pickup-Induced Auto-Switch to NEW Weapon" option, since the player might profit from switching to a NEW weapon AFTER reloading.

# Should auto-reload the current and empty weapon, to which we have just switched to or for we have just picked up ammo?
cl_wpn_auto_reload_when_picked_up_ammo_or_switched_to_empty_mag_nonempty_unmag = true
# Does NOT apply when current weapon has just run out of ammo due to firing it.
# For that, separate configuration is available.
#
# This auto-behavior can be turned off by Pro players who would rather handle everything manually.

# What to do if, after firing it, the current weapon runs out of ammo, but ammo is available to be loaded?
cl_wpn_empty_mag_nonempty_unmag_behavior = auto-reload
# The "Auto-Switch to Next Best Non-Empty" option considers only loaded weapons, while
# the "Auto-Switch to Next Best Reloadable" option considers both loaded and empty weapons with spare ammo.
#
# Note that this setting is best-effort: if it cannot be done, then another behavior will be executed:
# for example, if "Auto-Switch to Next Best Non-Empty" is selected but there is no such available, then
# the "Auto-Switch to Next Best Reloadable" behavior will be executed, or as last resort, the current weapon
# will be reloaded eventually.
#
# This auto-behavior can be fine-tuned for convenience, or even turned off by Pro players who would rather handle everything manually.

# Note for above: possible values are:
# - "no-op": do nothing (like before v0.2.7)
# - "auto-reload": reload the current weapon
# - "auto-switch-to-best-non-empty": switch to the best weapon already having loaded ammo
# - "auto-switch-to-best-empty-but-reloadable": switch to the best weapon with any kind of ammo (not necessarily loaded)

# What to do if, after firing it, the current weapon runs out of ammo, and ammo is NOT available to be loaded?
cl_wpn_empty_mag_empty_unmag_behavior = auto-switch-to-best-non-empty
# The "Auto-Switch to Next Best Non-Empty" option considers only loaded weapons, while
# the "Auto-Switch to Next Best Reloadable" option considers both loaded and empty weapons with spare ammo.
#
# Note that this setting is best-effort: if it cannot be done, then another behavior will be executed:
# for example, if "Auto-Switch to Next Best Non-Empty" is selected but there is no such available, then
# the "Auto-Switch to Next Best Reloadable" behavior will be executed, or as last resort, no action.
#
# This auto-behavior can be fine-tuned for convenience, or even turned off by Pro players who would rather handle everything manually.

# Note for above: possible values are:
# - "no-op": do nothing (like before v0.2.7)
# - "auto-switch-to-best-non-empty": switch to the best weapon already having loaded ammo
# - "auto-switch-to-best-empty-but-reloadable": switch to the best weapon with any kind of ammo (not necessarily loaded)

# Base frequency of updating game state (physics, weapons, etc., e.g.: 60 means update them 60 times per second).
tickrate = 60
# Higher value is better.
# Both server and client use it.
# Good to keep it high for more precise player object control since even though user input is sampled at framerate, controlling the player
# object is done at tickrate.
# The idea is to have game state update rate decoupled from the framerate, so that a too low or too high or an extremely variable framerate
# won't affect us negatively since each tick is simulated with FIXED delta time steps, even if the framerate is unplayable low.
# Furthermore, there is no use to update game state too frequently either, e.g. if framerate is 1000, game state update rate is adequate at 60 Hz.
#
# Rule: 20 <= tickrate <= MaxFPS (gfx_fps_max).

# Minimum frequency of updating physics simulation (e.g.: 60 means it should be updated minimum 60 times per second).
physics_rate_min = 60
# Higher value is better.
# Higher value results in more precise physics calculations, but more server-side CPU usage.
# Both server and client use it:
#  - server simulates physics at this frequency but this does not have impact on "server -> client" network traffic;
#  - client use it only for simulating bullet movement (for visuals only since server has the authority on bullet hit detection).
#
# Rationale behind: if tickrate is too low, physics calculation results may allow missed collisions between objects:
# fast objects may "jump over" walls, players might miss jumping into smaller holes or "entrances".
# To avoid these, the game can run multiple physics iterations per tick with smaller fixed timesteps, so it is allowed to set value greater than tickrate.
# Noet that with a too high value the last same sampled player input is repeated multiple times per tick in the physics iterations.
# Furthermore, there is no use to simulate physics too frequently either, e.g. if FPS is 1000, physics simulation frequency is most probably adequate at 60 Hz.
#
# Rules:
#   tickrate <= physics_rate_min (there must be at least 1 physics iteration per tick),
#   physics_rate_min % tickrate == 0 (physics update distribution in time should be constant/even),
#   physics_rate_min <= 60           (due to some limitation in the game).
#
# The number of physics iterations per tick is calculated as:
#   max(1, physics_rate_min / tickrate).

# Frequency at which server sends updates to clients (e.g.: 60 means clients are updated 60 times per second).
cl_updaterate = 60
# Higher value is better.
# Higher value results in clients receiving game state updates more frequently, but it also increases "server -> client" network traffic.
# It also affects the server-side player updates of the server player, so it is easy to test it by running the server instance only.
#
# Rules:
#   0 < cl_updaterate <= tickrate,
#   tickrate % cl_updaterate == 0 (clients should receive UPDATED physics results evenly distributed in time).

# Developer note: cl_updaterate is server-only property, thus it should have name like "sv_clupdaterate", but we mimic CS 1.6 CVAR naming.

# Debug: increase this for client to simulate slower rendering. Millisecs. Min value is 1.
#cl_extra_render_delay = 10

# Time in seconds to wait before trying to connect back to server.
cl_reconnect_delay = 2
# Example situation is map changing.
# Increasing it is good for testing situation when client is coming back slower than the server.

# Maximum expected number of players.
players_max = 15
# Must be positive.
# This is not a hard limit for allowed players to play on the same server at the same time, just a rought estimation.
# Currently used for determining the capacity of preallocated object pools, for example the bullet pool.


###########
#         #
#  MOUSE  #
#         #
###########


##############
#            #
#  KEYBOARD  #
#            #
##############


###########
#         #
#  AUDIO  #
#         #
###########

# Allow sound effects to be played.
sfx_enabled = true


###########
#         #
#  VIDEO  #
#         #
###########

# Display the game in the whole screen or in a small window?
gfx_windowed = true
# Even in fullscreen mode, the display resolution is not changed: desktop resolution is kept.
# Changing display resolution and DPI-awareness will be implemented in the future.

# Maximum number of rendered frames per second.
gfx_fps_max = 60
# Setting this to 0 means no FPS limit.
# Note that even if this value is 0, maximum FPS might be limited by the current V-Sync setting.
# Experimental config added in v0.2.3 only for development benchmarking reasons.

# Vertical Synchronization
gfx_vsync = false
# Enabling results in better visual quality.
# V-Sync is useful for avoiding the screen tearing effect that happens when framerate and screen refresh rate are out of sync.
# However, if you enable V-Sync, the maximum available framerate will be the screen refresh rate, and in some cases it can cause
# significantly lower framerate than otherwise would be available.
# If you have too low framerate, try disabling it.

# Should the 3rd-person camera follow the player AND the crosshair too?
gfx_cam_follows_xhair = true
# True: follow both the player AND the crosshair (default from v0.1.5), false: camera follows the player only (pre-v0.1.5 behavior).

# Should the camera tilt (change its pitch and yaw) when changing its position?
gfx_cam_tilting = true
# Default on from v0.1.5, turning it off restores pre-v0.1.5 behavior.

# Should the camera roll with the player during salto/somersault?
gfx_cam_rolling = false
# This was implemented only for fun, and I think nobody will really use it as it is quite disturbing.

# Smoke Amount
gfx_smoke_amount = normal
# Valid values: "none", "moderate", "normal", "extreme".
