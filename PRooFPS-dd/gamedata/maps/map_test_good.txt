# Lines starting with hashtag are comments and ignored by loader.

# Blank lines are also ignored by loader.

# Variable names are case-sensitive!

# If opened in Notepad++, I recommend setting INI or Makefile syntax highlighting in Language menu.

# Name of the map is that will be displayed in map select submenu.
Name = Test Map

# Preview Image is not needed to be explicitly defined here, as
# image file with same name is to be used implicitly as preview.

# Textures for each map block/element
# Not defining texture for a specific block does not cause error,
# but the block will be automatically assigned a dummy red texture.
# Textures should be placed in a separate directory specific to this map,
# within gamedata/textures directory. The specific directory name should be
# the same as the map file name without the extension part.
# In this case the directory is: gamedata/textures/map_test_good/

# Foreground blocks are at the same depth as the players,
# meaning they can be used as either floor or wall, since
# the players will collide with them.
# The following chars are used for defining foreground blocks in this map:
# BDFGHIJ
# Remaining chars to be used as foreground blocks in this map: KLQT

#B = floor.bmp # intentionally commented to test if B blocks really get red texture assigned 
D = conc02light.bmp
F = floor.bmp
G = floor.bmp
H = floor.bmp
I = floor.bmp
J = crate.bmp

# Background blocks are 1 unit away from the players' depth towards
# the background, they can be used as background walls.
# The following chars are used for defining background blocks in this map:
# acnorempu
# Remaining chars to be used as background blocks in this map: uvwxyz

a = brick1.bmp
c = brick2.bmp
n = aztec01.bmp
o = brick1.bmp
r = brick1.bmp

# Note that you can also change the texture coordinates for a block.
# Texture coordinates define how a texture is mapped onto a surface.
# In this case, the surface is a face of a block.
# Each block consists of 6 faces.
# You define texture mapping for 1 face, and the same mapping will be used for all the 6 faces of the block.
# Normally texture UV coordinates fall in the range of [0, 1].
# Values bigger than 1 will cause the same texture to be repeated across the face, for example changing
# all U texture coordinates from 1 to 2 will cause the texture to appear horizontally repeated, and
# similar effect applies to V but vertically.
#
# If you want to specify the texture coordinates for a face, then you have to define 4 values:
# - 2 floating point values for the UV texture coordinates of the bottom left vertex of each 6 faces of the block,
# - 2 floating point values for the UV texture coordinates of the top right vertex of each 6 faces of the block.
#
# Example:
# e = texture.bmp 0 0 1 1
#
# In above example, block 'e' will be assigned with texture.bmp, and the texture coordinates are:
# - for bottom left vertex: (U=0, V=0),
# - for top right vertex: (U=1, V=1).
#
# Illustration:
#
# UV(0,1)   UV(1,1)
#     --------
#     |      |
#     | face |
#     |      |
#     --------
# UV(0,0)   UV(1,0)
#
# From above definition, the other 2 vertices will be automatically assigned the following texture coordinates:
# - for bottom right vertex: (U=1, V=0), because it takes top right's U and bottom left's V coordinates,
# - for top left vertex: (U=0, V=1), because it takes bottom left's U and top right's V coordinates.
#
# If texture coordinates are not specified, it has the same effect as explicitly defining them as:
# 0 0 1 1
#
# In the below example, the same texture is used for 4 different blocks, but
# different texture coordinates are used by the 4 blocks, so that the texture spreads over
# the 4 blocks. This is useful if you want to display a single image using multiple blocks as
# you dont have to slice the image into separate image files.
#
# Note that with this technique, you can utilise a single texture atlas holding
# all textures for a single map, effectively increasing rendering speed on slower hardware.
# For example, if you have a 256x256 pixel size image, you can store 16 different 64x64 pixel size images in it,
# and use 0, 0.25, 0.5, 0.75 and 1 for U and V coordinates for different blocks to select the proper image.

e = proba128x128x24.bmp 0.0 0.0 0.5 0.5
m = proba128x128x24.bmp 0.5 0.0 1.0 0.5
p = proba128x128x24.bmp 0.5 0.5 1.0 1.0
u = proba128x128x24.bmp 0.0 0.5 0.5 1.0

# Pickupable items:
# '2' char represents pistol.
# '3' char represents machine gun.
# '4' char represents bazooka.
# '5' char represents pusha.
# ',' char represents armor.
# '+' char represents health/medkit.
# Since these items are in the foreground, a background block might be implicitly
# created behind them, if there is a previously created NEIGHBOR background block
# next to them. In such case, that previous background block's texture will be
# applied, otherwise NO background block will be created behind the item.
# Currently there is no map item for knife because knife is always available for the player.

# 'S' char represents spawn/start point. Multiple 'S' chars can be placed on the map.
# Number of spawn points might define the max allowed players on the map in the future but
# now players don't collide, so it is not yet a hard limit.
# A spawn point is similar to pickupable items but it is not visible.
# A background block might be implicitly created with the same rule as with pickupable items.
# Since a player can spawn only in standing position, placing a spawnpoint in a low-height
# tunnel where only crouching is possible, is considered as map design error.

# '^' char represents a jump pad that launches the player in the air vertically and/or horizontally.
# Jump pads are foreground blocks like walls thus the player collides with them.
# If there is a previous neighboring foreground block next to them, its texture will be applied, otherwise
# the texture specified for the '^' character will be used.
# Jump pads work only when approached from above, otherwise they don't launch the player in the air.

# The following texture is used for jump pads not having an immediate left foregound block neighbor next to them.
^ = floor.bmp

# You need to define how much jump force should be applied to the player by each jump pad.
# The way to do that is to define variables with the following naming convention:
# jumppad_#
# where # stands for the index of the specific jump pad.
#
# The indexing of jump pads starts from 0, and indices increase in the order as they are placed in the
# layout definition lines, left to right, top to bottom.
# The number of jump pad force definition variables must equal to the number of jump pads in the map layout.
#
# The value you set in the variable is actually 2 values:
# - vertical force multiplier
# - horizontal force multiplier (optional).
#
# The vertical multiplier is a multiplier of the INITIAL value of a regular player-induced vertical jump force (i.e. when you press jump button).
# It is important to understand that this changes the INITIAL value of the created jump force, e.g. setting 2.0 might result in a jump which is NOT exactly
# launching the player 2 times higher up in the air, you should experiment with different values to see how it works.
# Vertical multiplier must be positive.
#
# The horizontal multiplier is a multiplier of the INITIAL value of a regular player-induced horizontal jump force which is usually
# created when the player initiates the jump while also running, in such case the horizontal jump force continues to carry the player horizontally in the air.
# If horizontal multiplier is negative, the direction of the force is to the left, otherwise it is to the right.
#
# Only a simple space character is enough between the two multipliers.
#
# For example, to define the jump force for jump pad 0, to be a vertical force, with magnitude being the same as a regular jump:
# jumppad_0 = 1.0
#
# Note that setting exactly 1.0 for vertical is not recommended as it won't be completely handled as a jumppad-induced jump due to limitations in the code.
#
# To define a vertical jump force that is _initially_ 30% bigger than regular jump (might not be exactly result in a 30% higher jump):
# jumppad_0 = 1.3
#
# To define a jump force that also moves the player horizontally, with the vertical component _initially_ 100% bigger than with regular running:
# jumppad_0 = 1.3 2

jumppad_0 = 1
jumppad_1 = 2 2.4
jumppad_2 = 2.2 -3.3

# '\' and '/' chars are reserved for (not yet supported) stairs.

# If there is no '=' assignment char in a line and not it is not ignored line, it is treated as
# layout line.
# Map layout consists of lines of chars not containing either '#' or
# '=' chars. The map layout contains the blocks a.k.a. the elements
# of the map in multiple lines.
# Space chars represent empty block.
# Since all lines are trimmed before being processed, starting layout definition with whitespaces
# are strictly not recommended.

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  aaaaaaaa
cccccccccccccccccccccccccccccc  cccccccc
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa  aaaaaaaa
ooooacno^ooooooooooooooooooooo  oooooooo
nnnnnnnnnnn4nnnnnnnnnnnnnnnn^n  nnnnnnnn
oSoooooooooJoooooSooupoooooooo  oooSoooo
rrrrrrrrrrJJrrrrrrrremrrrrrrrr  rrrrrrrr
aaa##aaaaJJJJaaaaaaa2a3a+aaaaa  a5aaa,aa 2 +
BIJ##FGBIJDBHGBIJDBFGBIJDBFGBI  DBFGBIJD^B B  
BIJ##FGBIJDBHGBIJDBFGBIJDBFGBI  DBFGBIJD

# After or in between the map layout lines, we do not accept anything else.
